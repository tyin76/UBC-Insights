import { InsightError } from "../controller/IInsightFacade";

const noneKeyword = "NONE";

/**
 * Doc generated by AI btw
 * Extracts and validates the operator and its associated parameter from a given object.
 *
 * This function retrieves the keys from the provided object, ensuring that there is exactly one
 * operator defined. It validates the operator against a predefined list of valid operators
 * ("AND", "OR", "GT", "LT", "EQ", "IS", "NOT"). If the object is empty or contains
 * an invalid operator, it handles these cases accordingly.
 *
 * @param {any} object - The object containing the operator and parameter to be validated.
 *
 * @returns {string[]} - An array containing the operator at index 0 and the corresponding
 * parameter at index 1. If the object is empty, returns the
 * operator as "NONE" and an empty parameter.
 *
 * @throws {InsightError} - Throws an error if the object does not contain exactly one
 * valid operator.
 *
 * @example
 * const condition = { "AND": ["value1", "value2"] };
 * const result = extractOperatorAndParameter(condition);
 * // result will be ["AND", ["value1", "value2"]]
 */
export function extractAndValidateLogicalOperatorAndParameter(object: any): string[] {
	const logicalOperators = getLogicalOperators(object);

	validateThereIsASingleLogicalOperator(logicalOperators);

	const logicalOperator = extractSingleValidLogicalOperator(logicalOperators);

	const logicalOperatorParameter = getLogicalOperatorParameter(logicalOperator, object);

	return [logicalOperator, logicalOperatorParameter];
}

function isValidLogicalOperator(logicalOperator: string): boolean {
	return ["AND", "OR", "GT", "LT", "EQ", "IS", "NOT"].includes(logicalOperator);
}

function getLogicalOperatorParameter(logicalOperator: string, object: any): string {
	let logicalOperatorParameter = "";

	// IF we do indeed have an operator, then we need the value of that operator which we can get
	if (logicalOperator !== noneKeyword) {
		logicalOperatorParameter = object[logicalOperator];
	}

	return logicalOperatorParameter;
}

/**
 * Doc generated by AI btw
 * Retrieves the keys (operators) from the provided object.
 *
 * This function extracts the keys from an object, which can represent
 * various operators in a grammar such as "OR", "AND", "GT", "LT", etc.
 *
 * @param object - The object from which to retrieve the keys. This
 * object may contain multiple operator keys used
 * in the context of EBNF grammar.
 *
 * @returns An array of strings representing the keys (operators)
 * extracted from the provided object.
 *
 * @throws {Error} If the input is not an object or is null, an error
 * is thrown to indicate invalid input.
 *
 * @example
 * const operatorsObject = { AND: true, OR: false, GT: 10 };
 * const operators = getOperators(operatorsObject);
 * // operators will be ["AND", "OR", "GT"]
 */
function getLogicalOperators(object: any): string[] {
	return Object.keys(object);
}

function validateThereIsASingleLogicalOperator(logicalOperators: string[]): void {
	if (logicalOperators.length > 1) {
		throw new InsightError("Where should have at least one key");
	}
}

/**
 * Extracts and validates the first operator from a given array of operator strings.
 *
 * This function checks the provided array of operators to ensure it contains a valid
 * operator. Valid operators include "AND", "OR", "GT", "LT", "EQ", "IS", and "NOT".
 * If the array is empty or contains an invalid operator, the function will return a
 * default value specified by `noneKeyword`.
 *
 * @param operators - An array of strings representing potential operators.
 *
 * @returns A string representing the first valid operator from the array, or `noneKeyword`
 * if no valid operators are found.
 *
 * @throws InsightError - Throws an error if the provided array contains more than one operator.
 *
 * @example
 * // Example 1: Valid operators
 * const operators1 = ['AND', 'GT', 'LT'];
 * const validOperator1 = extractValidOperator(operators1);
 * console.log(validOperator1); // Output: 'AND'
 *
 * // Example 2: Empty array
 * const operators2: string[] = [];
 * const defaultOperator = extractValidOperator(operators2);
 * console.log(defaultOperator); // Output: value of `noneKeyword`
 *
 * // Example 3: Invalid operator
 * const operators3 = ['INVALID', 'GT'];
 * const validOperator3 = extractValidOperator(operators3);
 * console.log(validOperator3); // Output: 'INVALID' if defined as a valid operator or `noneKeyword`
 */
function extractSingleValidLogicalOperator(logicalOperators: string[]): string {
	let logicalOperator = "";

	if (!isValidLogicalOperator(logicalOperator) && logicalOperators.length === 0) {
		logicalOperator = noneKeyword;
	} else {
		logicalOperator = logicalOperators[0];
	}

	return logicalOperator;
}
